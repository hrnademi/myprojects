from sklearn.metrics import accuracy_score
from preprocess import plot_confusion_matrix
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, load_model
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.constraints import maxnorm
from keras.utils import np_utils
from keras.layers.noise import GaussianNoise
# from keras.layers.advanced_activations import SReLU
# from keras_contrib. layers.advanced_activations import srelu as SReLU

# from keras.utils.visualize_util import plot
from keras.utils import plot_model

import pandas as pd
import matplotlib.pyplot as plt
import time
import pickle
from kerutils import *

from keras.layers.noise import GaussianNoise


nb_epoch = 120
batch_size = 32

nb_classes = 10
class_name = {
    0: 'airplane',
    1: 'automobile',
    2: 'bird',
    3: 'cat',
    4: 'deer',
    5: 'dog',
    6: 'frog',
    7: 'horse',
    8: 'ship',
    9: 'truck',
}

(X_train, y_train), (X_test, y_test) = cifar10.load_data()
# somehow y_train comes as a 2D nx1 matrix
y_train = y_train.reshape(y_train.shape[0])
y_test = y_test.reshape(y_test.shape[0])

print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'training samples')
print(X_test.shape[0], 'validation samples')

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)

# nb_epoch = 120
# batch_size = 32

model3 = Sequential()
model3.add(Convolution2D(32, 3, 3, input_shape=(32, 32, 3),
                         border_mode='same', activation='relu', W_constraint=maxnorm(3)))
model3.add(Dropout(0.2))
model3.add(Convolution2D(32, 3, 3, activation='relu',
                         border_mode='same', W_constraint=maxnorm(3)))
model3.add(MaxPooling2D(pool_size=(2, 2)))
model3.add(Dropout(0.2))

model3.add(Convolution2D(64, 3, 3, border_mode='same'))
model3.add(Activation('relu'))
model3.add(MaxPooling2D(pool_size=(2, 2)))
model3.add(Dropout(0.25))

model3.add(Flatten())
model3.add(Dense(512, activation='relu', W_constraint=maxnorm(3)))
model3.add(Dropout(0.5))
model3.add(Dense(nb_classes, activation='softmax'))

# Compile model with SGD (Stochastic Gradient Descent)
lrate = 0.01
decay = lrate/nb_epoch
sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)
model3.compile(loss='categorical_crossentropy',
               optimizer=sgd, metrics=['accuracy'])
print(model3.summary())

print('Augmented Data Training.')

imdgen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    # randomly rotate images in the range (degrees, 0 to 180)
    rotation_range=0,
    # randomly shift images horizontally (fraction of total width)
    width_shift_range=0.1,
    # randomly shift images vertically (fraction of total height)
    height_shift_range=0.1,
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False,  # randomly flip images
)

# compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
imdgen.fit(X_train)

# fit the model on the batches generated by datagen.flow()
dgen = imdgen.flow(X_train, Y_train, batch_size=batch_size)
# this is from our kerutils module (see above)
fmon = FitMonitor(thresh=0.03, minacc=0.99)
h = model3.fit_generator(
    dgen,
    samples_per_epoch=X_train.shape[0],
    nb_epoch=nb_epoch,
    validation_data=(X_test, Y_test),
    verbose=1,
    callbacks=[fmon]
)

print('Saving model3 to "model3.h5"')
model3.save("model3.h5")
print('Saving history dict to pickle file: hist3.p')
with open('hist3.p', 'wb') as f:
    pickle.dump(h.history, f)

y_prob = model3.predict(X_test)
y_pred = y_prob.argmax(axis=-1)

plot_confusion_matrix(y_test, y_pred, classes=class_name,
                      normalize=False, title='Confusion matrix, without normalization')
print(
    f'Medium CNN with Data Augmentation: {accuracy_score(y_test, y_pred)}'
)
plt.show()
